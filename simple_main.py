#!/usr/bin/env python3
"""
Menu Principal Simplifi√© - Analyse MODIS Albedo Glacier Athabasca
Universit√© du Qu√©bec √† Trois-Rivi√®res - Projet de Ma√Ætrise

Options disponibles:
1. Analyse de la saison de fonte (Williamson & Menounos 2021) - VERSION QUI MARCHE
2. Analyse hypsom√©trique - Tranches d'√©l√©vation ¬±100m (NOUVEAU!)
3. Cartographie interactive
"""

def run_melt_season_analysis():
    """Lancer l'analyse de la saison de fonte"""
    try:
        print("üî¨ Lancement de l'analyse de saison de fonte...")
        print("üìö M√©thodologie: Williamson & Menounos (2021)")
        print("‚è≥ Cela peut prendre plusieurs minutes...")
        print()
        
        # Import et ex√©cution de l'analyse qui fonctionne
        import sys
        sys.path.append('src')
        from trend_analysis import run_melt_season_analysis_williamson
        results = run_melt_season_analysis_williamson()
        
        print("\n‚úÖ Analyse termin√©e!")
        print("üìä Consultez les fichiers g√©n√©r√©s:")
        print("   ‚Ä¢ outputs/csv/athabasca_melt_season_focused_data.csv") 
        print("   ‚Ä¢ figures/melt_season/athabasca_melt_season_comprehensive_analysis.png")
        
        return results
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")
        return None

def run_hypsometric_analysis():
    """Lancer l'analyse hypsom√©trique (par tranches d'√©l√©vation)"""
    try:
        print("üèîÔ∏è Lancement de l'analyse hypsom√©trique...")
        print("üìö M√©thodologie: Williamson & Menounos (2021) - Tranches d'√©l√©vation ¬±100m")
        print("üìè Analyse par bandes d'√©l√©vation autour de l'√©l√©vation m√©diane du glacier")
        print("‚è≥ Cela peut prendre plusieurs minutes...")
        print()
        
        # Import et ex√©cution de l'analyse hypsom√©trique
        import sys
        sys.path.append('src')
        from trend_analysis import run_hypsometric_analysis_williamson
        results = run_hypsometric_analysis_williamson()
        
        print("\n‚úÖ Analyse hypsom√©trique termin√©e!")
        print("üìä Consultez les fichiers g√©n√©r√©s:")
        print("   ‚Ä¢ outputs/csv/athabasca_hypsometric_data.csv") 
        print("   ‚Ä¢ outputs/csv/athabasca_hypsometric_results.csv")
        print("   ‚Ä¢ figures/athabasca_hypsometric_analysis.png")
        print("   ‚Ä¢ figures/athabasca_melt_season_with_elevation.png")
        
        if results and results.get('elevation_comparison', {}).get('transient_snowline_pattern', False):
            print("\nüéØ R√âSULTAT IMPORTANT:")
            print("   ‚úÖ PATTERN DE LIGNE DE NEIGE TRANSITOIRE D√âTECT√â!")
            print("   üìè Ceci correspond aux r√©sultats de Williamson & Menounos (2021)")
        
        return results
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse hypsom√©trique: {e}")
        return None

def run_elevation_map():
    """Cr√©er une carte d'√©l√©vation avec les bandes hypsom√©triques"""
    try:
        print("üó∫Ô∏è Cr√©ation de la carte d'√©l√©vation du glacier...")
        print("üìè Avec bandes hypsom√©triques selon Williamson & Menounos (2021)")
        print("‚è≥ Extraction des donn√©es SRTM et g√©n√©ration de la carte...")
        print()
        
        # Import des fonctions de cartographie d'√©l√©vation
        import sys
        sys.path.append('src')
        from trend_analysis import create_elevation_map
        
        # Cr√©er la carte d'√©l√©vation
        map_obj = create_elevation_map('athabasca_elevation_map.html')
        
        if map_obj:
            print("‚úÖ Carte d'√©l√©vation cr√©√©e avec succ√®s!")
            print("üìÇ Fichier: athabasca_elevation_map.html")
            print("üåê Ouvrez ce fichier dans votre navigateur web")
            print("\nüìã La carte contient:")
            print("   ‚Ä¢ √âl√©vation topographique SRTM")
            print("   ‚Ä¢ Fronti√®re du glacier Athabasca")
            print("   ‚Ä¢ √âl√©vation m√©diane du glacier")
            print("   ‚Ä¢ Bandes d'√©l√©vation Williamson & Menounos:")
            print("     - Au-dessus m√©diane (>100m)")
            print("     - Pr√®s m√©diane (¬±100m)")
            print("     - En-dessous m√©diane (>100m)")
        else:
            print("‚ùå √âchec de la cr√©ation de la carte")
        
        return map_obj
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la carte d'√©l√©vation: {e}")
        return None

def run_interactive_mapping():
    """Lancer la cartographie interactive"""
    try:
        print("üó∫Ô∏è Cartographie interactive du glacier...")
        
        # Import des fonctions de cartographie du module original
        import sys
        sys.path.append('src')
        from mapping import show_glacier_map, create_comparison_map
        
        print("\nOptions de cartographie:")
        print("a) Carte simple du glacier")
        print("b) Comparaison entre deux dates")
        
        choice = input("Votre choix (a/b): ").strip().lower()
        
        if choice == 'a':
            date = input("Date pour la carte (YYYY-MM-DD) [2023-08-15]: ").strip() or "2023-08-15"
            map_obj = show_glacier_map(date=date)
            
            # Sauvegarder
            filename = f"glacier_map_{date}.html"
            map_obj.save(filename)
            print(f"üíæ Carte sauvegard√©e: {filename}")
            
        elif choice == 'b':
            date1 = input("Premi√®re date (YYYY-MM-DD) [2023-06-15]: ").strip() or "2023-06-15"
            date2 = input("Deuxi√®me date (YYYY-MM-DD) [2023-09-15]: ").strip() or "2023-09-15"
            
            map_obj = create_comparison_map(date1, date2)
            
            # Sauvegarder
            filename = f"glacier_comparison_{date1}_vs_{date2}.html"
            map_obj.save(filename)
            print(f"üíæ Carte de comparaison sauvegard√©e: {filename}")
        
        else:
            print("‚ùå Choix invalide")
        
        print("üìÇ Ouvrez le fichier HTML dans votre navigateur")
        return map_obj
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cartographie: {e}")
        return None

def show_menu():
    """Afficher le menu principal"""
    print("üèîÔ∏è ANALYSE MODIS ALBEDO - GLACIER ATHABASCA")
    print("Universit√© du Qu√©bec √† Trois-Rivi√®res")
    print("=" * 50)
    print()
    print("Options disponibles:")
    print("1Ô∏è‚É£ Analyse saison de fonte (Williamson & Menounos 2021)")
    print("2Ô∏è‚É£ Analyse hypsom√©trique - Tranches d'√©l√©vation ¬±100m")
    print("3Ô∏è‚É£ Carte d'√©l√©vation interactive avec bandes hypsom√©triques")
    print("4Ô∏è‚É£ Cartographie interactive (autres options)")
    print("0Ô∏è‚É£ Quitter")
    print()

def main():
    """Fonction principale avec menu interactif"""
    while True:
        show_menu()
        
        try:
            choice = input("üî∏ Votre choix (0-4): ").strip()
            
            if choice == '0':
                print("üëã Au revoir!")
                break
                
            elif choice == '1':
                run_melt_season_analysis()
                
            elif choice == '2':
                run_hypsometric_analysis()
                
            elif choice == '3':
                run_elevation_map()
                
            elif choice == '4':
                run_interactive_mapping()
                
            else:
                print("‚ùå Choix invalide. Veuillez choisir 0, 1, 2, 3 ou 4.")
            
            print("\n" + "="*50 + "\n")
            
        except KeyboardInterrupt:
            print("\nüëã Analyse interrompue.")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    main()