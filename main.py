"""
Main analysis runner for MODIS albedo analysis - Athabasca Glacier
Simplified interface for running different analysis configurations
"""
import ee
from config import PERIODS_RAPIDE, SAMPLING_OPTIONS, SCALE_OPTIONS
from data_processing import extract_time_series_fast
from visualization import plot_albedo_fast, plot_albedo_evolution_enhanced
from melt_season import analyze_melt_season, plot_melt_season_analysis
import numpy as np

# Initialize Earth Engine
ee.Initialize()

# ================================================================================
# MAIN ANALYSIS FUNCTION
# ================================================================================

def run_analysis_optimized(period='recent', sampling=None, scale=500, use_broadband=False, smoothing='rolling'):
    """
    Fonction principale avec options d'optimisation
    
    Args:
        period: 'recent', 'fire_years', 'decade', 'sample', 'full_recent', ou tuple (start, end)
        sampling: None, 'weekly', 'monthly', 'seasonal'
        scale: 250, 500, 1000 (r√©solution en m√®tres)
        use_broadband: False (neige) ou True (large bande)
        smoothing: 'rolling', 'savgol', 'spline' (m√©thode de lissage)
    """
    
    print("üöÄ ANALYSE OPTIMIS√âE Alb√©do Glacier Athabasca")
    print("=" * 60)
    
    # D√©finir p√©riode
    if isinstance(period, tuple):
        start_date, end_date = period
        period_name = f"Personnalis√©e ({start_date} √† {end_date})"
    else:
        start_date, end_date = PERIODS_RAPIDE[period]
        period_name = period.title()
    
    # D√©finir √©chantillonnage
    sampling_days = SAMPLING_OPTIONS.get(sampling) if sampling else None
    
    print(f"üìÖ P√©riode: {period_name}")
    print(f"‚è±Ô∏è √âchantillonnage: {sampling or 'Toutes les images'}")
    print(f"üéØ R√©solution: {scale}m")
    print(f"üìä Type donn√©es: {'Large bande (MCD43A3 v6.1)' if use_broadband else 'Neige quotidien (MOD/MYD10A1 v6.1)'}")
    
    # Extraction
    df = extract_time_series_fast(
        start_date, end_date,
        use_broadband=use_broadband,
        sampling_days=sampling_days,
        scale=scale
    )
    
    if df.empty:
        print("‚ùå Aucune donn√©e extraite")
        return None
    
    # Statistiques rapides
    print(f"\nüìà R√âSULTATS:")
    print(f"   ‚Ä¢ {len(df)} observations")
    print(f"   ‚Ä¢ P√©riode effective: {df['date'].min()} √† {df['date'].max()}")
    
    if 'albedo_mean' in df.columns:
        albedo_data = df['albedo_mean'].dropna()
        if not albedo_data.empty:
            print(f"   ‚Ä¢ Alb√©do moyen du glacier: {albedo_data.mean():.3f} ¬± {albedo_data.std():.3f}")
            print(f"   ‚Ä¢ Plage de valeurs: [{albedo_data.min():.3f}, {albedo_data.max():.3f}]")
            print(f"   ‚Ä¢ Tendance annuelle: ", end="")
            
            annual_mean = df.groupby('year')['albedo_mean'].mean()
            if len(annual_mean) > 2:
                trend = np.polyfit(annual_mean.index, annual_mean.values, 1)[0]
                print(f"{trend:.4f}/an")
            else:
                print("Insuffisant pour calcul")
    
    # Visualisation
    print(f"\nüìä G√©n√©ration graphiques...")
    print(f"   ‚Ä¢ M√©thode de lissage: {smoothing}")
    
    # Graphiques standard
    plot_albedo_fast(df, f" - {period_name}", smoothing_method=smoothing)
    
    # Graphique d'√©volution am√©lior√©
    print(f"\nüìà G√©n√©ration graphique d'√©volution d√©taill√©...")
    plot_albedo_evolution_enhanced(df, f" ({period_name})", 
                                  smoothing_method=smoothing,
                                  save_path=f'evolution_albedo_{period}_{scale}m.png')
    
    # Analyse sp√©cifique de la saison de fonte
    print(f"\nüå°Ô∏è ANALYSE DE LA SAISON DE FONTE (Juin-Septembre)...")
    melt_stats, df_melt = analyze_melt_season(df)
    
    if melt_stats and df_melt is not None:
        print(f"   ‚Ä¢ Ann√©es analys√©es: {sorted(melt_stats.keys())}")
        print(f"   ‚Ä¢ Observations totales (juin-sept): {len(df_melt)}")
        
        # Statistiques r√©sum√©es
        all_means = [stats['mean'] for stats in melt_stats.values()]
        print(f"   ‚Ä¢ Alb√©do moyen global (fonte): {np.mean(all_means):.3f}")
        
        # Ann√©e avec le plus faible alb√©do moyen
        min_year = min(melt_stats.items(), key=lambda x: x[1]['mean'])[0]
        print(f"   ‚Ä¢ Ann√©e avec alb√©do le plus faible: {min_year} ({melt_stats[min_year]['mean']:.3f})")
        
        # G√©n√©rer le graphique de fonte avec lissage √©lev√©
        plot_melt_season_analysis(df_melt, melt_stats, 
                                 title=f" ({period_name})",
                                 save_path=f'melt_season_analysis_{period}_{scale}m.png',
                                 smoothing_level='high')
    else:
        print("   ‚ö†Ô∏è Donn√©es insuffisantes pour l'analyse de fonte")
    
    # Export
    filename = f'athabasca_albedo_{period}_{scale}m.csv'
    df.to_csv(filename, index=False)
    print(f"üíæ Donn√©es compl√®tes export√©es: {filename}")
    
    # Export donn√©es de fonte
    if df_melt is not None and not df_melt.empty:
        melt_filename = f'athabasca_melt_season_{period}_{scale}m.csv'
        df_melt.to_csv(melt_filename, index=False)
        print(f"üíæ Donn√©es saison de fonte export√©es: {melt_filename}")
    
    return df

# ================================================================================
# CONVENIENCE FUNCTIONS FOR COMMON ANALYSES
# ================================================================================

def quick_recent_analysis():
    """Analyse rapide des ann√©es r√©centes (2019-2024)"""
    print("üéØ ANALYSE RAPIDE - Ann√©es r√©centes (2019-2024)")
    return run_analysis_optimized(
        period='full_recent',
        sampling=None,
        scale=500,
        use_broadband=False,
        smoothing='savgol'
    )

def fire_impact_analysis():
    """Analyse de l'impact des feux (2017-2021)"""
    print("üî• ANALYSE IMPACT FEUX - Ann√©es 2017-2021")
    return run_analysis_optimized(
        period='fire_years',
        sampling=None,
        scale=500,
        use_broadband=False,
        smoothing='rolling'
    )

def decade_trend_analysis():
    """Analyse des tendances sur la derni√®re d√©cennie"""
    print("üìà ANALYSE TENDANCES - Derni√®re d√©cennie (2015-2024)")
    return run_analysis_optimized(
        period='decade',
        sampling='weekly',
        scale=500,
        use_broadband=False,
        smoothing='spline'
    )

def fast_test_analysis():
    """Test rapide avec param√®tres optimis√©s pour la vitesse"""
    print("‚ö° TEST RAPIDE - R√©solution r√©duite et √©chantillonnage mensuel")
    return run_analysis_optimized(
        period='recent',
        sampling='monthly',
        scale=1000,
        use_broadband=False,
        smoothing='rolling'
    )

def custom_analysis(start_date, end_date, **kwargs):
    """Analyse personnalis√©e avec dates sp√©cifiques"""
    print(f"üéõÔ∏è ANALYSE PERSONNALIS√âE - {start_date} √† {end_date}")
    return run_analysis_optimized(
        period=(start_date, end_date),
        **kwargs
    )

# ================================================================================
# INTERACTIVE MENU
# ================================================================================

def interactive_menu():
    """Menu interactif pour choisir le type d'analyse"""
    print("\nüéõÔ∏è MENU INTERACTIF - Analyses MODIS Alb√©do Athabasca")
    print("=" * 60)
    print("1Ô∏è‚É£ Analyse rapide r√©cente (2019-2024) - Recommand√©")
    print("2Ô∏è‚É£ Impact des feux (2017-2021)")
    print("3Ô∏è‚É£ Tendances d√©cennales (2015-2024)")
    print("4Ô∏è‚É£ Test rapide (r√©solution r√©duite)")
    print("5Ô∏è‚É£ Analyse personnalis√©e")
    print("0Ô∏è‚É£ Quitter")
    
    while True:
        try:
            choice = input("\nüî∏ Votre choix (0-5): ").strip()
            
            if choice == '0':
                print("üëã Au revoir!")
                break
            elif choice == '1':
                return quick_recent_analysis()
            elif choice == '2':
                return fire_impact_analysis()
            elif choice == '3':
                return decade_trend_analysis()
            elif choice == '4':
                return fast_test_analysis()
            elif choice == '5':
                print("\nüéõÔ∏è Analyse personnalis√©e:")
                start = input("Date de d√©but (YYYY-MM-DD): ").strip()
                end = input("Date de fin (YYYY-MM-DD): ").strip()
                
                print("\nOptions avanc√©es (appuyez sur Entr√©e pour valeurs par d√©faut):")
                scale = input("R√©solution (250/500/1000) [500]: ").strip() or "500"
                smoothing = input("Lissage (rolling/savgol/spline) [rolling]: ").strip() or "rolling"
                
                return custom_analysis(start, end, scale=int(scale), smoothing=smoothing)
            else:
                print("‚ùå Choix invalide. Veuillez choisir entre 0 et 5.")
                
        except KeyboardInterrupt:
            print("\nüëã Analyse interrompue.")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

# ================================================================================
# MAIN EXECUTION
# ================================================================================

if __name__ == "__main__":
    print("üèîÔ∏è MODIS Albedo Analysis - Athabasca Glacier")
    print("Universit√© du Qu√©bec √† Trois-Rivi√®res - Projet de Ma√Ætrise")
    print("=" * 70)
    
    # Option 1: Ex√©cution directe avec analyse recommand√©e
    print("\nüéØ EX√âCUTION AUTOMATIQUE: Analyse r√©cente compl√®te...")
    df_result = quick_recent_analysis()
    
    # Option 2: Menu interactif (d√©commentez pour activer)
    # interactive_menu()
    
    print(f"\n‚úÖ ANALYSE TERMIN√âE!")
    print(f"üí° Pour d'autres analyses, utilisez les fonctions:")
    print(f"   ‚Ä¢ quick_recent_analysis()")
    print(f"   ‚Ä¢ fire_impact_analysis()")
    print(f"   ‚Ä¢ decade_trend_analysis()")
    print(f"   ‚Ä¢ custom_analysis('2020-01-01', '2022-12-31')")
    print(f"   ‚Ä¢ interactive_menu()")